/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * MainFrame.java
 *
 * Created on 31.05.2011, 11:15:35
 */

package rfjava;

import com.theotherbell.ui.DateField;
import com.theotherbell.ui.DatePicker;
import java.awt.Frame;
import java.io.File;
import java.io.IOException;
import java.text.SimpleDateFormat;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;
import javax.swing.JDialog;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.JSpinner;
import javax.swing.SpinnerDateModel;
import javax.swing.table.DefaultTableModel;
import weka.core.Instances;

/**
 *
 * @author Ionel
 */
public class MainFrame extends javax.swing.JFrame {

    /** Creates new form MainFrame */
    public MainFrame() {
        rf = new RFClusteringRegression();
        kr = new KernelRegression();
        kcca = new KCCA();
        initComponents();

        jButtonSaveData.setVisible(false);
        jButtonConfiguration.setVisible(false);

        toggleAutomaticTestFeatures(false);
        
        jCheckKernelRegression.setVisible(false);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        bindingGroup = new org.jdesktop.beansbinding.BindingGroup();

        jbuttonGroup = new javax.swing.ButtonGroup();
        buttonGroupKCCA = new javax.swing.ButtonGroup();
        jTabbedPane = new javax.swing.JTabbedPane();
        jLoadDB = new javax.swing.JPanel();
        jLabel21 = new javax.swing.JLabel();
        jTextFieldURL = new javax.swing.JTextField();
        jLabel22 = new javax.swing.JLabel();
        jTextFieldDriver = new javax.swing.JTextField();
        jLabel23 = new javax.swing.JLabel();
        jTextFieldDBName = new javax.swing.JTextField();
        jLabel24 = new javax.swing.JLabel();
        jTextFieldUserName = new javax.swing.JTextField();
        jLabel25 = new javax.swing.JLabel();
        jPasswordField = new javax.swing.JPasswordField();
        jButtonConnect = new javax.swing.JButton();
        jScrollPane11 = new javax.swing.JScrollPane();
        jTextStatusDB = new javax.swing.JTextArea();
        jLabel26 = new javax.swing.JLabel();
        jPanelDateSelection = new javax.swing.JPanel();
        jLabel27 = new javax.swing.JLabel();
        jLabel28 = new javax.swing.JLabel();
        jLabel29 = new javax.swing.JLabel();
        jSpinnerStart = new JSpinner(new SpinnerDateModel());
        jSpinnerEnd = new JSpinner(new SpinnerDateModel());
        selectData = new java.awt.Checkbox();
        jButtonSaveData = new javax.swing.JButton();
        jLoadPanel = new javax.swing.JPanel();
        jButtonChooseDataSource = new javax.swing.JButton();
        jTextDataPath = new javax.swing.JTextField();
        jScrollPane3 = new javax.swing.JScrollPane();
        jListAttributes = new javax.swing.JList();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jTextNbInstances = new javax.swing.JTextField();
        jTextNbFeatures = new javax.swing.JTextField();
        jScrollPane4 = new javax.swing.JScrollPane();
        jTableFeatureValues = new javax.swing.JTable();
        jLabel7 = new javax.swing.JLabel();
        jTextMean = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        jTextStdDev = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jTextMin = new javax.swing.JTextField();
        jTextMax = new javax.swing.JTextField();
        jLoadPanelP = new javax.swing.JPanel();
        jButtonChooseDataSourceP = new javax.swing.JButton();
        jTextDataPathP = new javax.swing.JTextField();
        jScrollPane8 = new javax.swing.JScrollPane();
        jListAttributesP = new javax.swing.JList();
        jLabel14 = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        jLabel16 = new javax.swing.JLabel();
        jTextNbInstancesP = new javax.swing.JTextField();
        jTextNbFeaturesP = new javax.swing.JTextField();
        jScrollPane9 = new javax.swing.JScrollPane();
        jTableFeatureValuesP = new javax.swing.JTable();
        jLabel17 = new javax.swing.JLabel();
        jTextMeanP = new javax.swing.JTextField();
        jLabel18 = new javax.swing.JLabel();
        jTextStdDevP = new javax.swing.JTextField();
        jLabel19 = new javax.swing.JLabel();
        jLabel20 = new javax.swing.JLabel();
        jTextMinP = new javax.swing.JTextField();
        jTextMaxP = new javax.swing.JTextField();
        jMachineLearningPanel = new javax.swing.JPanel();
        jCheckClusteringRegression = new javax.swing.JCheckBox();
        jCheckKCCA = new javax.swing.JCheckBox();
        jButtonBuildPredictionModel = new javax.swing.JButton();
        jButtonSaveModel = new javax.swing.JButton();
        jCheckKernelRegression = new javax.swing.JCheckBox();
        jCheckBoxBestConfiguration = new javax.swing.JCheckBox();
        jScrollPane6 = new javax.swing.JScrollPane();
        jTextStatus = new javax.swing.JTextArea();
        jLabel12 = new javax.swing.JLabel();
        jCheckPlugins = new javax.swing.JCheckBox();
        jLabel30 = new javax.swing.JLabel();
        jLabel31 = new javax.swing.JLabel();
        jRadioButtonWorkflowPrediction = new javax.swing.JRadioButton();
        jRadioButtonNumericalPrediction = new javax.swing.JRadioButton();
        jResultsPanel = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextQuery = new javax.swing.JTextArea();
        jButtonPredict = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextResults = new javax.swing.JTextArea();
        jButtonLoadModel = new javax.swing.JButton();
        jScrollPane5 = new javax.swing.JScrollPane();
        jTextStatusLoadModel = new javax.swing.JTextArea();
        jLabel11 = new javax.swing.JLabel();
        jScrollPane7 = new javax.swing.JScrollPane();
        jTextWorkflow = new javax.swing.JTextArea();
        jLabel13 = new javax.swing.JLabel();
        jButtonConfiguration = new javax.swing.JButton();
        projectionKCCAButton = new javax.swing.JButton();
        testPredictionButton = new javax.swing.JButton();
        actualVsPredictedButton = new javax.swing.JButton();
        queryTestDataSourceButton = new javax.swing.JButton();
        pluginTestDataSourceButton = new javax.swing.JButton();
        jScrollPane10 = new javax.swing.JScrollPane();
        jListAttributesTest = new javax.swing.JList();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();

        jbuttonGroup.add(jCheckClusteringRegression);
        jbuttonGroup.add(jCheckKernelRegression);
        jbuttonGroup.add(jCheckKCCA);
        jbuttonGroup.add(jCheckBoxBestConfiguration);
        jbuttonGroup.add(jCheckPlugins);

        buttonGroupKCCA.add(jRadioButtonWorkflowPrediction);
        buttonGroupKCCA.add(jRadioButtonNumericalPrediction);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        org.jdesktop.beansbinding.Binding binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, this, org.jdesktop.beansbinding.ELProperty.create("Relevance Feedback"), this, org.jdesktop.beansbinding.BeanProperty.create("title"));
        bindingGroup.addBinding(binding);

        jLabel21.setText("URL:");

        jTextFieldURL.setText("jdbc:mysql://localhost:3306/");

        jLabel22.setText("Driver:");

        jTextFieldDriver.setText("com.mysql.jdbc.Driver");

        jLabel23.setText("Database:");

        jTextFieldDBName.setText("larkc");

        jLabel24.setText("Username:");

        jTextFieldUserName.setText("root");

        jLabel25.setText("Password:");

        jPasswordField.setText("root");

        jButtonConnect.setText("Connect and extract data");
        jButtonConnect.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonConnectActionPerformed(evt);
            }
        });

        jTextStatusDB.setBackground(new java.awt.Color(240, 240, 240));
        jTextStatusDB.setColumns(20);
        jTextStatusDB.setEditable(false);
        jTextStatusDB.setLineWrap(true);
        jTextStatusDB.setRows(5);
        jScrollPane11.setViewportView(jTextStatusDB);

        jLabel26.setText("Status:");

        jPanelDateSelection.setVisible(false);

        jLabel27.setText("Date period selection:");

        jLabel28.setText("Start date:");

        jLabel29.setText("End date:");

        JSpinner.DateEditor timeEditor = new JSpinner.DateEditor(jSpinnerStart, "yyyy-MMM-dd HH:mm:ss");
        long dCurrent=(Calendar.getInstance().getTimeInMillis()/1000)*1000;
        Date currDate=new Date(dCurrent);
        jSpinnerStart.setEditor(timeEditor);
        jSpinnerStart.setValue(currDate);

        JSpinner.DateEditor timeEditor2 = new JSpinner.DateEditor(jSpinnerEnd, "yyyy-MMM-dd HH:mm:ss");
        long dCurrent2=(Calendar.getInstance().getTimeInMillis()/1000)*1000;
        Date currDate2=new Date(dCurrent2);
        jSpinnerEnd.setEditor(timeEditor2);
        jSpinnerEnd.setValue(currDate2);

        javax.swing.GroupLayout jPanelDateSelectionLayout = new javax.swing.GroupLayout(jPanelDateSelection);
        jPanelDateSelection.setLayout(jPanelDateSelectionLayout);
        jPanelDateSelectionLayout.setHorizontalGroup(
            jPanelDateSelectionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelDateSelectionLayout.createSequentialGroup()
                .addGroup(jPanelDateSelectionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanelDateSelectionLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel27, javax.swing.GroupLayout.PREFERRED_SIZE, 151, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanelDateSelectionLayout.createSequentialGroup()
                        .addGap(33, 33, 33)
                        .addGroup(jPanelDateSelectionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel29)
                            .addComponent(jLabel28))
                        .addGap(23, 23, 23)
                        .addGroup(jPanelDateSelectionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jSpinnerStart, javax.swing.GroupLayout.DEFAULT_SIZE, 157, Short.MAX_VALUE)
                            .addComponent(jSpinnerEnd, javax.swing.GroupLayout.DEFAULT_SIZE, 157, Short.MAX_VALUE))))
                .addContainerGap())
        );
        jPanelDateSelectionLayout.setVerticalGroup(
            jPanelDateSelectionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelDateSelectionLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel27)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanelDateSelectionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel28)
                    .addComponent(jSpinnerStart, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelDateSelectionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel29)
                    .addComponent(jSpinnerEnd, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(43, 43, 43))
        );

        selectData.setFont(new java.awt.Font("Tahoma", 1, 12));
        selectData.setLabel("Specific date period for training");
        selectData.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                selectDataItemStateChanged(evt);
            }
        });

        jButtonSaveData.setText("Save data to disk");
        jButtonSaveData.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSaveDataActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jLoadDBLayout = new javax.swing.GroupLayout(jLoadDB);
        jLoadDB.setLayout(jLoadDBLayout);
        jLoadDBLayout.setHorizontalGroup(
            jLoadDBLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jLoadDBLayout.createSequentialGroup()
                .addGroup(jLoadDBLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jLoadDBLayout.createSequentialGroup()
                        .addGap(314, 314, 314)
                        .addComponent(jButtonConnect)
                        .addGap(41, 41, 41)
                        .addComponent(jButtonSaveData))
                    .addGroup(jLoadDBLayout.createSequentialGroup()
                        .addGap(103, 103, 103)
                        .addGroup(jLoadDBLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel22)
                            .addComponent(jLabel21)
                            .addComponent(jLabel24)
                            .addComponent(jLabel23)
                            .addComponent(jLabel25))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jLoadDBLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jPanelDateSelection, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jLoadDBLayout.createSequentialGroup()
                                .addGroup(jLoadDBLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jLoadDBLayout.createSequentialGroup()
                                        .addGroup(jLoadDBLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jTextFieldDriver, javax.swing.GroupLayout.DEFAULT_SIZE, 212, Short.MAX_VALUE)
                                            .addComponent(jTextFieldURL, javax.swing.GroupLayout.DEFAULT_SIZE, 212, Short.MAX_VALUE)
                                            .addComponent(jTextFieldDBName, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGap(150, 150, 150))
                                    .addGroup(jLoadDBLayout.createSequentialGroup()
                                        .addGroup(jLoadDBLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                            .addComponent(jPasswordField, javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jTextFieldUserName, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 130, Short.MAX_VALUE)
                                            .addComponent(selectData, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGap(83, 83, 83)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jLoadDBLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel26)
                                    .addComponent(jScrollPane11, javax.swing.GroupLayout.DEFAULT_SIZE, 427, Short.MAX_VALUE))))))
                .addContainerGap())
        );
        jLoadDBLayout.setVerticalGroup(
            jLoadDBLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jLoadDBLayout.createSequentialGroup()
                .addGap(31, 31, 31)
                .addGroup(jLoadDBLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jLoadDBLayout.createSequentialGroup()
                        .addComponent(jLabel26)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jScrollPane11, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jLoadDBLayout.createSequentialGroup()
                        .addGroup(jLoadDBLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jTextFieldURL, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel21))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jLoadDBLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jTextFieldDriver, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel22))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jLoadDBLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jTextFieldDBName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel23))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jLoadDBLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jTextFieldUserName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel24))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jLoadDBLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel25)
                            .addComponent(jPasswordField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(51, 51, 51)))
                .addGap(20, 20, 20)
                .addComponent(selectData, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanelDateSelection, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jLoadDBLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonConnect)
                    .addComponent(jButtonSaveData))
                .addContainerGap(274, Short.MAX_VALUE))
        );

        jTabbedPane.addTab("Database", jLoadDB);

        jButtonChooseDataSource.setText("Choose Data Source");
        jButtonChooseDataSource.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonChooseDataSourceActionPerformed(evt);
            }
        });

        jTextDataPath.setEditable(false);

        jListAttributes.setModel(new javax.swing.AbstractListModel() {
            String[] strings = {};
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        jListAttributes.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jListAttributes.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                jListAttributesValueChanged(evt);
            }
        });
        jScrollPane3.setViewportView(jListAttributes);

        jLabel4.setText("Features:");

        jLabel5.setText("Nb instances loaded:");

        jLabel6.setText("Nb features for each instance:");

        jTextNbInstances.setEditable(false);

        jTextNbFeatures.setEditable(false);

        jTableFeatureValues.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Instance No.", "Feature Value"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTableFeatureValues.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        jTableFeatureValues.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jTableFeatureValues.getTableHeader().setReorderingAllowed(false);
        jScrollPane4.setViewportView(jTableFeatureValues);
        jTableFeatureValues.getColumnModel().getColumn(0).setMaxWidth(100);
        jTableFeatureValues.getColumnModel().getColumn(1).setMinWidth(400);

        jLabel7.setText("Mean:");

        jTextMean.setEditable(false);

        jLabel8.setText("Std. deviation:");

        jTextStdDev.setEditable(false);

        jLabel9.setText("Minimum:");

        jLabel10.setText("Maximum:");

        jTextMin.setEditable(false);

        jTextMax.setEditable(false);

        javax.swing.GroupLayout jLoadPanelLayout = new javax.swing.GroupLayout(jLoadPanel);
        jLoadPanel.setLayout(jLoadPanelLayout);
        jLoadPanelLayout.setHorizontalGroup(
            jLoadPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jLoadPanelLayout.createSequentialGroup()
                .addGap(28, 28, 28)
                .addGroup(jLoadPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel4)
                    .addGroup(jLoadPanelLayout.createSequentialGroup()
                        .addComponent(jLabel6)
                        .addGap(18, 18, 18)
                        .addComponent(jTextNbFeatures, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jLoadPanelLayout.createSequentialGroup()
                        .addComponent(jLabel5)
                        .addGap(18, 18, 18)
                        .addComponent(jTextNbInstances, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jLoadPanelLayout.createSequentialGroup()
                        .addComponent(jButtonChooseDataSource)
                        .addGap(18, 18, 18)
                        .addComponent(jTextDataPath, javax.swing.GroupLayout.PREFERRED_SIZE, 615, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jLoadPanelLayout.createSequentialGroup()
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 284, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(jLoadPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jLoadPanelLayout.createSequentialGroup()
                                .addGap(74, 74, 74)
                                .addGroup(jLoadPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel9)
                                    .addComponent(jLabel7))
                                .addGroup(jLoadPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addGroup(jLoadPanelLayout.createSequentialGroup()
                                        .addGap(18, 18, 18)
                                        .addComponent(jTextMin, javax.swing.GroupLayout.DEFAULT_SIZE, 111, Short.MAX_VALUE))
                                    .addGroup(jLoadPanelLayout.createSequentialGroup()
                                        .addGap(18, 18, 18)
                                        .addComponent(jTextMean)))
                                .addGap(41, 41, 41)
                                .addGroup(jLoadPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addGroup(jLoadPanelLayout.createSequentialGroup()
                                        .addComponent(jLabel10)
                                        .addGap(41, 41, 41)
                                        .addComponent(jTextMax, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(jLoadPanelLayout.createSequentialGroup()
                                        .addComponent(jLabel8)
                                        .addGap(18, 18, 18)
                                        .addComponent(jTextStdDev))))
                            .addGroup(jLoadPanelLayout.createSequentialGroup()
                                .addGap(47, 47, 47)
                                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 464, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addContainerGap())
        );
        jLoadPanelLayout.setVerticalGroup(
            jLoadPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jLoadPanelLayout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addGroup(jLoadPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonChooseDataSource)
                    .addComponent(jTextDataPath, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jLoadPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(jTextNbInstances, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jLoadPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(jTextNbFeatures, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel4)
                .addGap(18, 18, 18)
                .addGroup(jLoadPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 511, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jLoadPanelLayout.createSequentialGroup()
                        .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 367, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(33, 33, 33)
                        .addGroup(jLoadPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(jLoadPanelLayout.createSequentialGroup()
                                .addGroup(jLoadPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jTextMin, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel9, javax.swing.GroupLayout.Alignment.TRAILING))
                                .addGap(18, 18, 18)
                                .addGroup(jLoadPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel7)
                                    .addComponent(jTextMean, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(jLoadPanelLayout.createSequentialGroup()
                                .addGroup(jLoadPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel10)
                                    .addComponent(jTextMax, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addGroup(jLoadPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel8)
                                    .addComponent(jTextStdDev, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jTabbedPane.addTab("Load Query-Workflow-Platform-System Metrics", jLoadPanel);

        jButtonChooseDataSourceP.setText("Choose Data Source");
        jButtonChooseDataSourceP.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonChooseDataSourcePActionPerformed(evt);
            }
        });

        jTextDataPathP.setEditable(false);

        jListAttributesP.setModel(new javax.swing.AbstractListModel() {
            String[] strings = {};
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        jListAttributesP.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jListAttributesP.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                jListAttributesPValueChanged(evt);
            }
        });
        jScrollPane8.setViewportView(jListAttributesP);

        jLabel14.setText("Features:");

        jLabel15.setText("Nb instances loaded:");

        jLabel16.setText("Nb features for each instance:");

        jTextNbInstancesP.setEditable(false);

        jTextNbFeaturesP.setEditable(false);

        jTableFeatureValuesP.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Instance No.", "Feature Value"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTableFeatureValuesP.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        jTableFeatureValuesP.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jTableFeatureValuesP.getTableHeader().setReorderingAllowed(false);
        jScrollPane9.setViewportView(jTableFeatureValuesP);
        jTableFeatureValuesP.getColumnModel().getColumn(0).setMaxWidth(100);
        jTableFeatureValuesP.getColumnModel().getColumn(1).setMinWidth(400);

        jLabel17.setText("Mean:");

        jTextMeanP.setEditable(false);

        jLabel18.setText("Std. deviation:");

        jTextStdDevP.setEditable(false);

        jLabel19.setText("Minimum:");

        jLabel20.setText("Maximum:");

        jTextMinP.setEditable(false);

        jTextMaxP.setEditable(false);

        javax.swing.GroupLayout jLoadPanelPLayout = new javax.swing.GroupLayout(jLoadPanelP);
        jLoadPanelP.setLayout(jLoadPanelPLayout);
        jLoadPanelPLayout.setHorizontalGroup(
            jLoadPanelPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jLoadPanelPLayout.createSequentialGroup()
                .addGap(28, 28, 28)
                .addGroup(jLoadPanelPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel14)
                    .addGroup(jLoadPanelPLayout.createSequentialGroup()
                        .addComponent(jLabel16)
                        .addGap(18, 18, 18)
                        .addComponent(jTextNbFeaturesP, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jLoadPanelPLayout.createSequentialGroup()
                        .addComponent(jLabel15)
                        .addGap(18, 18, 18)
                        .addComponent(jTextNbInstancesP, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jLoadPanelPLayout.createSequentialGroup()
                        .addComponent(jButtonChooseDataSourceP)
                        .addGap(18, 18, 18)
                        .addComponent(jTextDataPathP, javax.swing.GroupLayout.PREFERRED_SIZE, 615, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jLoadPanelPLayout.createSequentialGroup()
                        .addComponent(jScrollPane8, javax.swing.GroupLayout.PREFERRED_SIZE, 284, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(jLoadPanelPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jLoadPanelPLayout.createSequentialGroup()
                                .addGap(74, 74, 74)
                                .addGroup(jLoadPanelPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel19)
                                    .addComponent(jLabel17))
                                .addGroup(jLoadPanelPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addGroup(jLoadPanelPLayout.createSequentialGroup()
                                        .addGap(18, 18, 18)
                                        .addComponent(jTextMinP, javax.swing.GroupLayout.DEFAULT_SIZE, 111, Short.MAX_VALUE))
                                    .addGroup(jLoadPanelPLayout.createSequentialGroup()
                                        .addGap(18, 18, 18)
                                        .addComponent(jTextMeanP)))
                                .addGap(41, 41, 41)
                                .addGroup(jLoadPanelPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addGroup(jLoadPanelPLayout.createSequentialGroup()
                                        .addComponent(jLabel20)
                                        .addGap(41, 41, 41)
                                        .addComponent(jTextMaxP, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(jLoadPanelPLayout.createSequentialGroup()
                                        .addComponent(jLabel18)
                                        .addGap(18, 18, 18)
                                        .addComponent(jTextStdDevP))))
                            .addGroup(jLoadPanelPLayout.createSequentialGroup()
                                .addGap(47, 47, 47)
                                .addComponent(jScrollPane9, javax.swing.GroupLayout.PREFERRED_SIZE, 464, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addContainerGap())
        );
        jLoadPanelPLayout.setVerticalGroup(
            jLoadPanelPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jLoadPanelPLayout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addGroup(jLoadPanelPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonChooseDataSourceP)
                    .addComponent(jTextDataPathP, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jLoadPanelPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel15)
                    .addComponent(jTextNbInstancesP, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jLoadPanelPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel16)
                    .addComponent(jTextNbFeaturesP, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel14)
                .addGap(18, 18, 18)
                .addGroup(jLoadPanelPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane8, javax.swing.GroupLayout.PREFERRED_SIZE, 511, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jLoadPanelPLayout.createSequentialGroup()
                        .addComponent(jScrollPane9, javax.swing.GroupLayout.PREFERRED_SIZE, 367, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(33, 33, 33)
                        .addGroup(jLoadPanelPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(jLoadPanelPLayout.createSequentialGroup()
                                .addGroup(jLoadPanelPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jTextMinP, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel19, javax.swing.GroupLayout.Alignment.TRAILING))
                                .addGap(18, 18, 18)
                                .addGroup(jLoadPanelPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel17)
                                    .addComponent(jTextMeanP, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(jLoadPanelPLayout.createSequentialGroup()
                                .addGroup(jLoadPanelPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel20)
                                    .addComponent(jTextMaxP, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addGroup(jLoadPanelPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel18)
                                    .addComponent(jTextStdDevP, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jTabbedPane.addTab("Load Plugin Metrics", jLoadPanelP);

        jCheckClusteringRegression.setText("Clustering and Regression (Scalability&Bottleneck prediction)");
        jCheckClusteringRegression.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCheckClusteringRegressionItemStateChanged(evt);
            }
        });

        jCheckKCCA.setText("KCCA (Scalability&Bottleneck&Workflow prediction)");
        jCheckKCCA.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCheckKCCAItemStateChanged(evt);
            }
        });

        jButtonBuildPredictionModel.setText("Build prediction model");
        jButtonBuildPredictionModel.setEnabled(jCheckClusteringRegression.isSelected());
        jButtonBuildPredictionModel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonBuildPredictionModelActionPerformed(evt);
            }
        });

        jButtonSaveModel.setText("Save model");
        jButtonSaveModel.setEnabled(rf.isTrained);
        jButtonSaveModel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSaveModelActionPerformed(evt);
            }
        });

        jCheckKernelRegression.setText("Kernel Regression  (Scalability&Bottleneck prediction)");
        jCheckKernelRegression.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCheckKernelRegressionItemStateChanged(evt);
            }
        });

        jCheckBoxBestConfiguration.setText("Best Configuration (Workflow prediction)");
        jCheckBoxBestConfiguration.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCheckBoxBestConfigurationItemStateChanged(evt);
            }
        });

        jTextStatus.setBackground(new java.awt.Color(240, 240, 240));
        jTextStatus.setColumns(20);
        jTextStatus.setEditable(false);
        jTextStatus.setLineWrap(true);
        jTextStatus.setRows(5);
        jScrollPane6.setViewportView(jTextStatus);

        jLabel12.setText("Status:");

        jCheckPlugins.setText("Plugin Metrics Prediction (Scalabilityprediction)");
        jCheckPlugins.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCheckPluginsItemStateChanged(evt);
            }
        });

        jLabel30.setText("Clustering&Regression based techniques:");

        jLabel31.setText("KCCA based techniques:");

        jRadioButtonWorkflowPrediction.setSelected(true);
        jRadioButtonWorkflowPrediction.setText("Workflow Prediction");

        jRadioButtonNumericalPrediction.setText("Numerical Prediction");

        javax.swing.GroupLayout jMachineLearningPanelLayout = new javax.swing.GroupLayout(jMachineLearningPanel);
        jMachineLearningPanel.setLayout(jMachineLearningPanelLayout);
        jMachineLearningPanelLayout.setHorizontalGroup(
            jMachineLearningPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jMachineLearningPanelLayout.createSequentialGroup()
                .addGap(40, 40, 40)
                .addGroup(jMachineLearningPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel31)
                    .addGroup(jMachineLearningPanelLayout.createSequentialGroup()
                        .addGap(32, 32, 32)
                        .addComponent(jCheckKCCA))
                    .addGroup(jMachineLearningPanelLayout.createSequentialGroup()
                        .addGap(72, 72, 72)
                        .addGroup(jMachineLearningPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jRadioButtonWorkflowPrediction)
                            .addComponent(jRadioButtonNumericalPrediction)))
                    .addComponent(jLabel30)
                    .addGroup(jMachineLearningPanelLayout.createSequentialGroup()
                        .addGap(35, 35, 35)
                        .addGroup(jMachineLearningPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jCheckKernelRegression)
                            .addComponent(jCheckBoxBestConfiguration)
                            .addComponent(jCheckClusteringRegression)
                            .addComponent(jCheckPlugins))))
                .addContainerGap(574, Short.MAX_VALUE))
            .addGroup(jMachineLearningPanelLayout.createSequentialGroup()
                .addGap(147, 147, 147)
                .addGroup(jMachineLearningPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jMachineLearningPanelLayout.createSequentialGroup()
                        .addGroup(jMachineLearningPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jButtonBuildPredictionModel, javax.swing.GroupLayout.PREFERRED_SIZE, 229, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jMachineLearningPanelLayout.createSequentialGroup()
                                .addGap(59, 59, 59)
                                .addComponent(jButtonSaveModel)))
                        .addContainerGap())
                    .addGroup(jMachineLearningPanelLayout.createSequentialGroup()
                        .addGroup(jMachineLearningPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane6, javax.swing.GroupLayout.DEFAULT_SIZE, 427, Short.MAX_VALUE)
                            .addComponent(jLabel12))
                        .addGap(390, 390, 390))))
        );
        jMachineLearningPanelLayout.setVerticalGroup(
            jMachineLearningPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jMachineLearningPanelLayout.createSequentialGroup()
                .addGap(32, 32, 32)
                .addComponent(jLabel30)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jCheckClusteringRegression)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCheckBoxBestConfiguration)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCheckPlugins)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCheckKernelRegression)
                .addGap(18, 18, 18)
                .addComponent(jLabel31)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCheckKCCA)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jRadioButtonWorkflowPrediction, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(3, 3, 3)
                .addComponent(jRadioButtonNumericalPrediction, javax.swing.GroupLayout.PREFERRED_SIZE, 13, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(20, 20, 20)
                .addComponent(jButtonBuildPredictionModel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButtonSaveModel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel12)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(207, Short.MAX_VALUE))
        );

        jTabbedPane.addTab("Machine Learning", jMachineLearningPanel);

        jLabel3.setText("Query");

        jTextQuery.setColumns(20);
        jTextQuery.setRows(5);
        jTextQuery.setLineWrap(true);
        jScrollPane1.setViewportView(jTextQuery);

        jButtonPredict.setText("Predict");
        jButtonPredict.setEnabled(rf.isTrained);
        jButtonPredict.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonPredictActionPerformed(evt);
            }
        });

        jTextResults.setColumns(20);
        jTextResults.setRows(5);
        jScrollPane2.setViewportView(jTextResults);

        jButtonLoadModel.setText("Load Prediction Model");
        jButtonLoadModel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonLoadModelActionPerformed(evt);
            }
        });

        jTextStatusLoadModel.setBackground(new java.awt.Color(240, 240, 240));
        jTextStatusLoadModel.setColumns(20);
        jTextStatusLoadModel.setEditable(false);
        jTextStatusLoadModel.setLineWrap(true);
        jTextStatusLoadModel.setRows(5);
        jScrollPane5.setViewportView(jTextStatusLoadModel);

        jLabel11.setText("Status:");

        jTextWorkflow.setColumns(20);
        jTextWorkflow.setRows(5);
        jTextQuery.setLineWrap(true);
        jScrollPane7.setViewportView(jTextWorkflow);

        jLabel13.setText("Workflow");

        jButtonConfiguration.setText("Optimal Configuration");
        jButtonConfiguration.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonConfigurationActionPerformed(evt);
            }
        });

        projectionKCCAButton.setText("View Projections");
        projectionKCCAButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                projectionKCCAButtonActionPerformed(evt);
            }
        });

        testPredictionButton.setText("Test Prediction Model");
        testPredictionButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                testPredictionButtonActionPerformed(evt);
            }
        });

        actualVsPredictedButton.setText("Actual/Predicted Plot");
        actualVsPredictedButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                actualVsPredictedButtonActionPerformed(evt);
            }
        });

        queryTestDataSourceButton.setText("Query Data Source");
        queryTestDataSourceButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                queryTestDataSourceButtonActionPerformed(evt);
            }
        });

        pluginTestDataSourceButton.setText("Plugin Data Source");
        pluginTestDataSourceButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pluginTestDataSourceButtonActionPerformed(evt);
            }
        });

        jListAttributesTest.setModel(new javax.swing.AbstractListModel() {
            String[] strings = {};
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        jListAttributesTest.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jListAttributesTest.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                jListAttributesTestValueChanged(evt);
            }
        });
        jScrollPane10.setViewportView(jListAttributesTest);

        jLabel1.setText("Automatic tests");

        jLabel2.setText("Simple test");

        javax.swing.GroupLayout jResultsPanelLayout = new javax.swing.GroupLayout(jResultsPanel);
        jResultsPanel.setLayout(jResultsPanelLayout);
        jResultsPanelLayout.setHorizontalGroup(
            jResultsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jResultsPanelLayout.createSequentialGroup()
                .addGap(38, 38, 38)
                .addGroup(jResultsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jResultsPanelLayout.createSequentialGroup()
                        .addGap(157, 157, 157)
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 203, Short.MAX_VALUE)
                        .addComponent(jButtonLoadModel))
                    .addGroup(jResultsPanelLayout.createSequentialGroup()
                        .addGap(102, 102, 102)
                        .addComponent(jButtonPredict)
                        .addGap(18, 18, 18)
                        .addComponent(jButtonConfiguration))
                    .addGroup(jResultsPanelLayout.createSequentialGroup()
                        .addGroup(jResultsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel13, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel3, javax.swing.GroupLayout.Alignment.TRAILING))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jResultsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 500, Short.MAX_VALUE)
                            .addGroup(jResultsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 500, Short.MAX_VALUE)
                                .addComponent(jScrollPane7)))))
                .addGroup(jResultsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jResultsPanelLayout.createSequentialGroup()
                        .addGroup(jResultsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jResultsPanelLayout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 33, Short.MAX_VALUE)
                                .addGroup(jResultsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jResultsPanelLayout.createSequentialGroup()
                                        .addComponent(queryTestDataSourceButton)
                                        .addGap(18, 18, 18)
                                        .addComponent(pluginTestDataSourceButton)
                                        .addGap(23, 23, 23))
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jResultsPanelLayout.createSequentialGroup()
                                        .addComponent(testPredictionButton)
                                        .addGap(92, 92, 92))
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jResultsPanelLayout.createSequentialGroup()
                                        .addGroup(jResultsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(jResultsPanelLayout.createSequentialGroup()
                                                .addGap(10, 10, 10)
                                                .addComponent(projectionKCCAButton))
                                            .addComponent(actualVsPredictedButton))
                                        .addGap(79, 79, 79))))
                            .addGroup(jResultsPanelLayout.createSequentialGroup()
                                .addGap(18, 18, 18)
                                .addComponent(jScrollPane10, javax.swing.GroupLayout.PREFERRED_SIZE, 289, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(55, 55, 55))
                    .addGroup(jResultsPanelLayout.createSequentialGroup()
                        .addGap(125, 125, 125)
                        .addComponent(jLabel1)
                        .addContainerGap())))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jResultsPanelLayout.createSequentialGroup()
                .addContainerGap(256, Short.MAX_VALUE)
                .addGroup(jResultsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel11)
                    .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 529, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(179, 179, 179))
        );
        jResultsPanelLayout.setVerticalGroup(
            jResultsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jResultsPanelLayout.createSequentialGroup()
                .addGap(44, 44, 44)
                .addGroup(jResultsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jButtonLoadModel)
                    .addComponent(jLabel1))
                .addGap(24, 24, 24)
                .addGroup(jResultsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jResultsPanelLayout.createSequentialGroup()
                        .addGroup(jResultsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel3)
                            .addGroup(jResultsPanelLayout.createSequentialGroup()
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jResultsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel13)
                                    .addComponent(jScrollPane7, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addGroup(jResultsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jButtonPredict)
                                    .addComponent(jButtonConfiguration))))
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane2))
                    .addGroup(jResultsPanelLayout.createSequentialGroup()
                        .addGroup(jResultsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(queryTestDataSourceButton)
                            .addComponent(pluginTestDataSourceButton))
                        .addGap(54, 54, 54)
                        .addComponent(testPredictionButton)
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane10, javax.swing.GroupLayout.PREFERRED_SIZE, 301, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(actualVsPredictedButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(projectionKCCAButton)))
                .addGap(30, 30, 30)
                .addComponent(jLabel11)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(165, 165, 165))
        );

        jTabbedPane.addTab("Prediction", jResultsPanel);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jTabbedPane, javax.swing.GroupLayout.PREFERRED_SIZE, 969, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jTabbedPane, javax.swing.GroupLayout.PREFERRED_SIZE, 694, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        bindingGroup.bind();

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonLoadModelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonLoadModelActionPerformed
        JFileChooser fc = new JFileChooser();
        fc.setCurrentDirectory(new File(System.getProperty("user.dir")));
        fc.setFileFilter(new FileFilterExt("model"));
        int returnVal = fc.showOpenDialog(MainFrame.this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            String fileName=fc.getSelectedFile().getAbsolutePath();

            jTextStatusLoadModel.setText("Loading model . . .");
            jButtonConfiguration.setVisible(false);


            boolean succesLoad=false;

            toggleAutomaticTestFeatures(false);

            if (!succesLoad) {
                try{
                    RFClusteringRegression loadedModel=RFClusteringRegression.loadModel(fileName);
                    rf=loadedModel;
                    if (rf!=null) {
                        toggleAutomaticTestFeatures(true);
                        
                        jTextStatusLoadModel.setText("Loading clustering&regression model successfully!");
                        jButtonPredict.setEnabled(rf.isTrained);
                        jCheckClusteringRegression.setSelected(rf.isTrained);
                        succesLoad=true;
                        jTextQuery.setText(RFClusteringRegression.testQuery());
                        jTextWorkflow.setText("");

                        pluginTestDataSourceButton.setVisible(false);
                        projectionKCCAButton.setVisible(false);
                    }
                }catch (Exception e) {
                }
            }

            if (!succesLoad) {
                try{
                    BestConfigurator loadedModel=BestConfigurator.loadModel(fileName);
                    bf=loadedModel;
                    if (bf!=null) {
                        jTextStatusLoadModel.setText("Loading best-configuration model successfully!");
                        jButtonPredict.setEnabled(bf.isTrained);
                        jCheckBoxBestConfiguration.setSelected(bf.isTrained);
                        succesLoad=true;
                        jTextQuery.setText(BestConfigurator.testQuery());
                        jTextWorkflow.setText("");
                    }
                }catch (Exception e) {
                }
            }

            if (!succesLoad) {
                try{
                    KernelRegression loadedModel=KernelRegression.loadModel(fileName);
                    kr=loadedModel;
                    if (kr!=null) {
                        jTextStatusLoadModel.setText("Loading kernel-regression model successfully!");
                        jButtonPredict.setEnabled(kr.isTrained);
                        jCheckKernelRegression.setSelected(kr.isTrained);
                        succesLoad=true;
                        jTextQuery.setText(KernelRegression.testQuery());
                        jTextWorkflow.setText("");
                    }
                }catch (Exception e) {
                }
            }

            if (!succesLoad) {
                try{
                    RFPlugins loadedModel=RFPlugins.loadModel(fileName);
                    prf=loadedModel;
                    if (prf!=null) {
                        jTextStatusLoadModel.setText("Loading plugins metrics prediction model successfully!");
                        jButtonPredict.setEnabled(prf.isTrained);
                        jCheckPlugins.setSelected(prf.isTrained);
                        succesLoad=true;
                        jTextQuery.setText(RFPlugins.testQuery());
                        jTextWorkflow.setText(RFPlugins.testWorkflow());
                    }
                }catch (Exception e) {
                }
            }

            if (!succesLoad) {
                try{
                    KCCA loadedModel=KCCA.loadModel(fileName);
                    kcca=loadedModel;
                    if (kcca!=null) {
                        toggleAutomaticTestFeatures(true);

                        queryTestDataSourceButton.setVisible(false);
                        pluginTestDataSourceButton.setVisible(false);

                        jTextStatusLoadModel.setText("Loading KCCA model successfully!");
                        jButtonPredict.setEnabled(kcca.isTrained);
                        jCheckKCCA.setSelected(kcca.isTrained);
                        jRadioButtonWorkflowPrediction.setSelected(kcca.whichScenario==1);
                        jRadioButtonNumericalPrediction.setSelected(kcca.whichScenario==2);
                        succesLoad=true;
                        jTextQuery.setText(KCCA.testQuery());
                        jButtonConfiguration.setVisible(kcca.whichScenario==1);
                        jButtonPredict.setVisible(kcca.whichScenario==2);
                   }
                }catch (Exception e) {
                }
            }

            if (!succesLoad) {
                JOptionPane.showMessageDialog(this,"Unable to load model!","Loading model error...",JOptionPane.ERROR_MESSAGE);
                toggleAutomaticTestFeatures(false);
                jTextStatusLoadModel.setText("Loading failed!");
                jButtonPredict.setEnabled(false);
                jTextQuery.setText("");
                jTextWorkflow.setText("");
            }
        }
}//GEN-LAST:event_jButtonLoadModelActionPerformed

    private void jButtonPredictActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonPredictActionPerformed
        jTextResults.setText("");
        jTextStatusLoadModel.setText("Waiting for prediction...");
        if (rf!=null && jCheckClusteringRegression.isSelected()) {
            String query=jTextQuery.getText();
            String result=rf.predictAttrForQuery(query);
            jTextResults.setText(result);
        }

        if (bf!=null && jCheckBoxBestConfiguration.isSelected()) {
            String query=jTextQuery.getText();
            String result=bf.predictQuery(query,"1,2, 12-last",jTextWorkflow.getText());
            jTextResults.setText(result);
        }

        if (kr!=null && jCheckKernelRegression.isSelected()) {
            String query=jTextQuery.getText();
            String result=kr.predictTestQuery(query);
            jTextResults.setText(result);
        }

        if (prf!=null && jCheckPlugins.isSelected()) {
            String query=jTextQuery.getText();
            String workflow=jTextWorkflow.getText();
            String result=prf.predictQuery(query,"1,2, 12-last",workflow);
            jTextResults.setText(result);
        }

        if (kcca!=null && jCheckKCCA.isSelected()) {
            String query=jTextQuery.getText();
            String result = null;
            try {
                String wf = null;
                String app = null;
                sw = new SqlToWekaExtractor(jTextFieldURL.getText(),jTextFieldDriver.getText(),jTextFieldDBName.getText(),jTextFieldUserName.getText(),new String(jPasswordField.getPassword()));
                result = kcca.predictTestQuery(query,sw,app,wf);
            } catch (Exception ex) {
                Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
            jTextResults.setText(result);
        }
        jTextStatusLoadModel.setText("DONE!");
    }//GEN-LAST:event_jButtonPredictActionPerformed

    private void jCheckBoxBestConfigurationItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCheckBoxBestConfigurationItemStateChanged
        jTextStatus.setText("");
        jButtonBuildPredictionModel.setEnabled(jCheckBoxBestConfiguration.isSelected());
}//GEN-LAST:event_jCheckBoxBestConfigurationItemStateChanged

    private void jCheckKernelRegressionItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCheckKernelRegressionItemStateChanged
        jTextStatus.setText("");
        jButtonBuildPredictionModel.setEnabled(jCheckKernelRegression.isSelected());
}//GEN-LAST:event_jCheckKernelRegressionItemStateChanged

    private void jButtonSaveModelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSaveModelActionPerformed
        JFileChooser fc = new JFileChooser();
        fc.setCurrentDirectory(new File(System.getProperty("user.dir")));
        fc.setFileFilter(new FileFilterExt("model"));
        int returnVal = fc.showSaveDialog(MainFrame.this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            String fileName=fc.getSelectedFile().getAbsolutePath()+".model";
            jTextStatus.setText("Saving . . .");

            boolean done=false;
            if (jCheckClusteringRegression.isSelected())
            {
                rf.saveModel(fileName);
                done=true;
            }
            else
                if (jCheckBoxBestConfiguration.isSelected())
                {
                    bf.saveModel(fileName);
                    done=true;
                }
                else
                    if (jCheckKernelRegression.isSelected())
                    {
                        kr.saveModel(fileName);
                        done=true;
                    }
                    else
                        if (jCheckPlugins.isSelected())
                        {
                            prf.saveModel(fileName);
                            done=true;
                        }
                    else
                        if (jCheckKCCA.isSelected())
                        {
                            kcca.saveModel(fileName);
                            done=true;
                        }
            if (done)
                jTextStatus.setText("SUCCESSFULLY saved!");
            else
                jTextStatus.setText("NOT saved!");
        }
}//GEN-LAST:event_jButtonSaveModelActionPerformed

    private void jButtonBuildPredictionModelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonBuildPredictionModelActionPerformed
        // TODO add your handling code here:
        toggleAutomaticTestFeatures(false);

        jButtonConfiguration.setVisible(false);

        if (jCheckClusteringRegression.isSelected()) {
            if (dp==null) {
                JOptionPane.showMessageDialog(this,"First please load a ARFF file for training!","No input data...",JOptionPane.ERROR_MESSAGE);
                return;
            }

            System.out.println("Training Clustering&Regression");
            jTextStatus.setText("Building . . .");
            rf.isTrained=false;
            try{
                toggleAutomaticTestFeatures(true);

                rf.setDataPreprocessor(dp);
                rf.initClusteringPrediction();
                jTextStatus.setText("DONE Building!");
                rf.isTrained=true;
                jTextStatusLoadModel.setText("Clustering-regression model is loaded!");
                jTextQuery.setText(RFClusteringRegression.testQuery());
                jTextWorkflow.setText("");
                jTextResults.setText("");

                projectionKCCAButton.setVisible(false);
                pluginTestDataSourceButton.setVisible(false);

            }catch (Exception e) {
                JOptionPane.showMessageDialog(this,"Unable to build model!","Bad input data...",JOptionPane.ERROR_MESSAGE);
                jTextStatus.setText("Build failed!");
            }
            jButtonPredict.setEnabled(rf.isTrained);
            jButtonSaveModel.setEnabled(rf.isTrained);
        }

        if (jCheckKernelRegression.isSelected()) {
            if (dp==null) {
                JOptionPane.showMessageDialog(this,"First please load a ARFF file for training!","No input data...",JOptionPane.ERROR_MESSAGE);
                return;
            }

            System.out.println("Training KernelRegression");
            jTextStatus.setText("Building . . .");
            kr.isTrained=false;
            int [] trainingFeatures= new int[] {9,10,11,12,13,14,15,16};
            int classFeature=18;
            try{
                kr.setDataPreprocessor(dp);
                kr.initPredictionModel(trainingFeatures, classFeature);  //numerotare de la 1 a atributelor
                kr.computeKernelAndWeights();
                jTextStatus.setText("DONE Building!");
                kr.isTrained=true;
                jTextStatusLoadModel.setText("Kernel regression model is loaded!");
                jTextQuery.setText(KernelRegression.testQuery());
                jTextWorkflow.setText("");
                jTextResults.setText("");
            }catch (Exception e) {
                JOptionPane.showMessageDialog(this,"Unable to build model!","Bad input data...",JOptionPane.ERROR_MESSAGE);
                jTextStatus.setText("Build failed!");
            }

            jButtonPredict.setEnabled(kr.isTrained);
            jButtonSaveModel.setEnabled(kr.isTrained);
        }

        if (jCheckBoxBestConfiguration.isSelected()) {
            if (dp==null) {
                JOptionPane.showMessageDialog(this,"First please load a ARFF file for training!","No input data...",JOptionPane.ERROR_MESSAGE);
                return;
            }

            jTextStatus.setText("Building . . .");
            System.out.println("***Choosing the best configuration***");
            bf = new BestConfigurator();
            bf.isTrained=false;
            try{
                bf.setDataPreprocessor(dp);
  //            bf.initialClustering("1-4, 13-40", 2, 40);
  //            DataPreprocessor.outputArffInstances(dp.getTransformedData(), "D:/tbf.arff");
                bf.initialClustering("1,2,12-last", -1, 2);

                //bf.computeMetricsConfigurations(clusterQuery);
                bf.computeAllClusterBestConfigurations();
                //System.out.println("Best configuration is: "+bf.bestConfiguration());
                //bf.secondClusteringOnWorkflow("1-39", bf.configurations.size());

//              bf.buildAllPredictors("1-39");
                bf.buildAllPredictors("1,3-last","3-11");

                jTextStatus.setText("DONE Building!");
                bf.isTrained=true;
                jTextStatusLoadModel.setText("Best configuration model is loaded!");
                jTextQuery.setText(BestConfigurator.testQuery());
                jTextWorkflow.setText("");
                jTextResults.setText("");
            }catch (Exception e){
                JOptionPane.showMessageDialog(this,"Unable to build model!","Bad input data...",JOptionPane.ERROR_MESSAGE);
                jTextStatus.setText("Build failed!");
                e.printStackTrace();
            }

            jButtonPredict.setEnabled(bf.isTrained);
            jButtonSaveModel.setEnabled(bf.isTrained);


            //            int testInstanceNo=3;
            //            int clusterQuery= bf.findClusterInstance(dp.getTransformedData(), testInstanceNo, "1-4, 13-40");
            //            System.out.println("Instanta "+testInstanceNo+" e in clusterul: "+clusterQuery);
            //            String p=bf.predictQuery(dp.getTransformedData(), testInstanceNo, "1-4, 13-40");
            //            System.out.println(p);
        }


        if (jCheckPlugins.isSelected()) {
            if (dp==null) {
                JOptionPane.showMessageDialog(this,"First please load a ARFF file for training!","No input data...",JOptionPane.ERROR_MESSAGE);
                return;
            }

            if (jCheckPlugins.isSelected() && dpP==null) {
                JOptionPane.showMessageDialog(this,"Please load both query/workflow and plugins ARFF files for training!","No input data...",JOptionPane.ERROR_MESSAGE);
                return;
            }

            jTextStatus.setText("Building . . .");
            System.out.println("***RF Plugins Metrics***");
            prf = new RFPlugins();
            prf.isTrained=false;
            try{
                prf.setDataPreprocessorQueryWorkflow(dp);
                prf.setDataPreprocessorPlugins(dpP);
                prf.initialClusteringOnQuery("1,2, 12-last", 2, 2, 1, 3, 4, 1);
                prf.buildAllPredictors("1,3-last");
//                prf.initialClusteringOnQuery("1-6, 15-45", 2, 45, 2, 6, 25, 2);
//                prf.buildAllPredictors("1-44");

                jTextStatus.setText("DONE Building!");
                prf.isTrained=true;
                jTextStatusLoadModel.setText("Plugins metrics prediction model is loaded!");
                jTextQuery.setText(RFPlugins.testQuery());
                jTextWorkflow.setText(RFPlugins.testWorkflow());
                jTextResults.setText("");
             }catch (Exception e){
                JOptionPane.showMessageDialog(this,"Unable to build model!","Bad input data...",JOptionPane.ERROR_MESSAGE);
                jTextStatus.setText("Build failed!");
            }

            jButtonPredict.setEnabled(prf.isTrained);
            jButtonSaveModel.setEnabled(prf.isTrained);

        }

        if(jCheckKCCA.isSelected())
        {
            System.out.println("Training KCCA");
            kcca.isTrained=false;

            try{
                jTextStatus.setText("Reading database...");
                sw = new SqlToWekaExtractor(jTextFieldURL.getText(),jTextFieldDriver.getText(),jTextFieldDBName.getText(),jTextFieldUserName.getText(),new String(jPasswordField.getPassword()));

                Date std=(Date)jSpinnerStart.getValue();
                Date ed=(Date)jSpinnerEnd.getValue();
                SimpleDateFormat fData=new SimpleDateFormat("dd-MM-yyyy HH:mm:ss");

                String start=fData.format(std);
                String end=fData.format(ed);

                if (jRadioButtonWorkflowPrediction.isSelected())
                    kcca.initPredictionModel(1, sw, start, end);
                else if (jRadioButtonNumericalPrediction.isSelected())
                    kcca.initPredictionModel(2, sw, start, end);

                jTextStatus.setText("Building...");
                kcca.computeKCCA();
                jTextStatus.setText("DONE Building!");
                kcca.isTrained=true;
                jTextStatusLoadModel.setText("KCCA model is loaded!");
                jButtonConfiguration.setVisible(kcca.whichScenario==1);
                jButtonPredict.setVisible(kcca.whichScenario==2);

                jTextQuery.setText(KCCA.testQuery());
                toggleAutomaticTestFeatures(true);

                queryTestDataSourceButton.setVisible(false);
                pluginTestDataSourceButton.setVisible(false);
            }
            catch(NullPointerException e)
            {
                JOptionPane.showMessageDialog(this, "Invalid database connection credentials!", "Database error", JOptionPane.ERROR_MESSAGE);
                return;
            }
            catch(Exception e)
            {
            }
            jButtonPredict.setEnabled(kcca.isTrained);
            jButtonSaveModel.setEnabled(kcca.isTrained);
        }
    }//GEN-LAST:event_jButtonBuildPredictionModelActionPerformed

    private void jCheckClusteringRegressionItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCheckClusteringRegressionItemStateChanged
        jTextStatus.setText("");
        jButtonBuildPredictionModel.setEnabled(jCheckClusteringRegression.isSelected());
}//GEN-LAST:event_jCheckClusteringRegressionItemStateChanged

    private void jListAttributesValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_jListAttributesValueChanged
        // TODO add your handling code here:
        if (dp==null) return;
        int selAttr=jListAttributes.getSelectedIndex();
        if ((selAttr<0) || (selAttr>=dp.getNoAttributes())) return;

        DefaultTableModel featureTableModel = (DefaultTableModel) jTableFeatureValues.getModel();
        featureTableModel.setRowCount(0);

        for (int i=0; i<dp.getNoInstances();i++) {
            Object row [] = new Object[2];
            row[0]=new Integer(i);
            row[1]=new String(dp.getStringInstanceValue(i, selAttr));

            featureTableModel.insertRow(i, row);
        }

        if (dp.isNumericAttribute(selAttr)) {
            jTextMin.setText(String.valueOf(dp.computeMinValue(selAttr)));
            jTextMax.setText(String.valueOf(dp.computeMaxValue(selAttr)));
            jTextMean.setText(String.valueOf(dp.computeMeanValue(selAttr)));
            jTextStdDev.setText(String.valueOf(dp.computeStdDevValue(selAttr)));
        } else {
            jTextMin.setText("-");
            jTextMax.setText("-");
            jTextMean.setText("-");
            jTextStdDev.setText("-");
        }
}//GEN-LAST:event_jListAttributesValueChanged

    private void jButtonChooseDataSourceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonChooseDataSourceActionPerformed
        // TODO add your handling code here:
        JFileChooser fc = new JFileChooser();
        fc.setCurrentDirectory(new File(System.getProperty("user.dir")));
        fc.setFileFilter(new FileFilterExt("arff"));
        int returnVal = fc.showOpenDialog(MainFrame.this);
        dp=null;
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            jTextDataPath.setText(fc.getSelectedFile().getAbsolutePath());
            try{
                dp = new DataPreprocessor();
                dp.loadInitialData(jTextDataPath.getText());
                jTextNbFeatures.setText(String.valueOf(dp.getNoAttributes()));
                jTextNbInstances.setText(String.valueOf(dp.getNoInstances()));
                jListAttributes.setListData(dp.getAttrNamesList());
                jTextMin.setText("");
                jTextMax.setText("");
                jTextMean.setText("");
                jTextStdDev.setText("");
                DefaultTableModel featureTableModel = (DefaultTableModel) jTableFeatureValues.getModel();
                featureTableModel.setRowCount(0);
            } catch (IOException e) {
                dp=null;
                JOptionPane.showMessageDialog(this,"Please load a valid ARFF file!","Loading data error...",JOptionPane.ERROR_MESSAGE);
            }
        }
        if (dp==null) {
            jTextDataPath.setText("");
            jListAttributes.setListData(new String[] {});
            jTextNbFeatures.setText("");
            jTextNbInstances.setText("");
            jTextMin.setText("");
            jTextMax.setText("");
            jTextMean.setText("");
            jTextStdDev.setText("");
            DefaultTableModel featureTableModel = (DefaultTableModel) jTableFeatureValues.getModel();
            featureTableModel.setRowCount(0);
        }
}//GEN-LAST:event_jButtonChooseDataSourceActionPerformed

    private void jCheckKCCAItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCheckKCCAItemStateChanged
       jButtonBuildPredictionModel.setEnabled(jCheckKCCA.isSelected());
    }//GEN-LAST:event_jCheckKCCAItemStateChanged

    private void jButtonConfigurationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonConfigurationActionPerformed
        // TODO add your handling code here:
        if (rf!=null && jCheckClusteringRegression.isSelected()) {
            jTextResults.setText("This method does not support configuration proposal yet!");
        }

        if (bf!=null && jCheckBoxBestConfiguration.isSelected()) {
            jTextResults.setText("This method does not support configuration proposal yet!");
        }

        if (kr!=null && jCheckKernelRegression.isSelected()) {
            jTextResults.setText("This method does not support configuration proposal yet!");
        }
        
        if (kcca!=null && jCheckKCCA.isSelected()) {
            String query=jTextQuery.getText();
            String result = null;
            try {
                String app = null;
                sw = new SqlToWekaExtractor(jTextFieldURL.getText(),jTextFieldDriver.getText(),jTextFieldDBName.getText(),jTextFieldUserName.getText(),new String(jPasswordField.getPassword()));
                result = kcca.configurationTestQuery(query,sw,app);
            } catch (Exception ex) {
                Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
            jTextResults.setText(result);
        }
    }//GEN-LAST:event_jButtonConfigurationActionPerformed

    private void jButtonChooseDataSourcePActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonChooseDataSourcePActionPerformed
        // TODO add your handling code here:
        JFileChooser fc = new JFileChooser();
        fc.setCurrentDirectory(new File(System.getProperty("user.dir")));
        fc.setFileFilter(new FileFilterExt("arff"));
        int returnVal = fc.showOpenDialog(MainFrame.this);
        dpP=null;
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            jTextDataPathP.setText(fc.getSelectedFile().getAbsolutePath());
            try{
                dpP = new DataPreprocessor();
                dpP.loadInitialData(jTextDataPathP.getText());
                jTextNbFeaturesP.setText(String.valueOf(dpP.getNoAttributes()));
                jTextNbInstancesP.setText(String.valueOf(dpP.getNoInstances()));
                jListAttributesP.setListData(dpP.getAttrNamesList());
                jTextMinP.setText("");
                jTextMaxP.setText("");
                jTextMeanP.setText("");
                jTextStdDevP.setText("");
                DefaultTableModel featureTableModel = (DefaultTableModel) jTableFeatureValuesP.getModel();
                featureTableModel.setRowCount(0);
            } catch (IOException e) {
                dpP=null;
                JOptionPane.showMessageDialog(this,"Please load a valid ARFF file!","Loading data error...",JOptionPane.ERROR_MESSAGE);
            }
        }
        if (dpP==null) {
            jTextDataPathP.setText("");
            jListAttributesP.setListData(new String[] {});
            jTextNbFeaturesP.setText("");
            jTextNbInstancesP.setText("");
            jTextMinP.setText("");
            jTextMaxP.setText("");
            jTextMeanP.setText("");
            jTextStdDevP.setText("");
            DefaultTableModel featureTableModel = (DefaultTableModel) jTableFeatureValuesP.getModel();
            featureTableModel.setRowCount(0);
        }
    }//GEN-LAST:event_jButtonChooseDataSourcePActionPerformed

    private void jListAttributesPValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_jListAttributesPValueChanged
        // TODO add your handling code here:
                // TODO add your handling code here:
        if (dpP==null) return;
        int selAttr=jListAttributesP.getSelectedIndex();
        if ((selAttr<0) || (selAttr>=dpP.getNoAttributes())) return;

        DefaultTableModel featureTableModel = (DefaultTableModel) jTableFeatureValuesP.getModel();
        featureTableModel.setRowCount(0);

        for (int i=0; i<dpP.getNoInstances();i++) {
            Object row [] = new Object[2];
            row[0]=new Integer(i);
            row[1]=new String(dpP.getStringInstanceValue(i, selAttr));

            featureTableModel.insertRow(i, row);
        }

        if (dpP.isNumericAttribute(selAttr)) {
            jTextMinP.setText(String.valueOf(dpP.computeMinValue(selAttr)));
            jTextMaxP.setText(String.valueOf(dpP.computeMaxValue(selAttr)));
            jTextMeanP.setText(String.valueOf(dpP.computeMeanValue(selAttr)));
            jTextStdDevP.setText(String.valueOf(dpP.computeStdDevValue(selAttr)));
        } else {
            jTextMinP.setText("-");
            jTextMaxP.setText("-");
            jTextMeanP.setText("-");
            jTextStdDevP.setText("-");
        }
    }//GEN-LAST:event_jListAttributesPValueChanged

    private void jCheckPluginsItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCheckPluginsItemStateChanged
        jTextStatus.setText("");
        jButtonBuildPredictionModel.setEnabled(jCheckPlugins.isSelected());
    }//GEN-LAST:event_jCheckPluginsItemStateChanged

    private void projectionKCCAButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_projectionKCCAButtonActionPerformed
        // TODO add your handling code here:
        kcca.plotProjections();
    }//GEN-LAST:event_projectionKCCAButtonActionPerformed

    private void testPredictionButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_testPredictionButtonActionPerformed
        // TODO add your handling code here:

        
        jTextStatusLoadModel.setText("Test in progress...");

        if (jCheckKCCA.isSelected())
        {
            try {
                sw = new SqlToWekaExtractor(jTextFieldURL.getText(),jTextFieldDriver.getText(),jTextFieldDBName.getText(),jTextFieldUserName.getText(),new String(jPasswordField.getPassword()));

                Date std=(Date)jSpinnerStart.getValue();
                Date ed=(Date)jSpinnerEnd.getValue();
                SimpleDateFormat fData=new SimpleDateFormat("dd-MM-yyyy HH:mm:ss");

                String start=fData.format(std);
                String end=fData.format(ed);

                kcca.autoTest(sw, start, end);
                jTextStatusLoadModel.setText("Test done!");
            } catch (Exception ex) {
                Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
            jListAttributesTest.setListData(kcca.getTestAttributeNames().toArray());
        }
        
        if (jCheckClusteringRegression.isSelected())
        {
            if (dpTestQuery == null) {
                     JOptionPane.showMessageDialog(this,"First please load a ARFF file for automatic testing!","No input data...",JOptionPane.ERROR_MESSAGE);
                     return;
            }
            rf.automaticTest(dpTestQuery);
            jListAttributesTest.setListData(rf.predAttribName);
        }
        
    }//GEN-LAST:event_testPredictionButtonActionPerformed

    private void actualVsPredictedButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_actualVsPredictedButtonActionPerformed
        // TODO add your handling code here:
        if (jCheckKCCA.isSelected())
        {
            if (kcca.getActual() == null || kcca.getResults() == null)
            {
            JOptionPane.showMessageDialog(this,"Please perform the test first!","Error",JOptionPane.ERROR_MESSAGE);
            return;
            }
            kcca.plotPredictedVsActual(jListAttributesTest.getSelectedIndex());
        }
        if (jCheckClusteringRegression.isSelected())
            rf.plotPredictedVsActual(dpTestQuery, jListAttributesTest.getSelectedIndex());
    }//GEN-LAST:event_actualVsPredictedButtonActionPerformed

    private void queryTestDataSourceButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_queryTestDataSourceButtonActionPerformed
        // TODO add your handling code here:
        JFileChooser fc = new JFileChooser();
        fc.setCurrentDirectory(new File(System.getProperty("user.dir")));
        fc.setFileFilter(new FileFilterExt("arff"));
        int returnVal = fc.showOpenDialog(MainFrame.this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            try{
                dpTestQuery = new DataPreprocessor();
                dpTestQuery.loadInitialData(fc.getSelectedFile().getAbsolutePath());
                jTextStatusLoadModel.setText("Query test data loaded!");
            } catch (IOException e) {
                dpTestQuery = null;
                JOptionPane.showMessageDialog(this,"Please load a valid ARFF file!","Loading data error...",JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_queryTestDataSourceButtonActionPerformed

    private void pluginTestDataSourceButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pluginTestDataSourceButtonActionPerformed
        // TODO add your handling code here:
        JFileChooser fc = new JFileChooser();
        fc.setCurrentDirectory(new File(System.getProperty("user.dir")));
        fc.setFileFilter(new FileFilterExt("arff"));
        int returnVal = fc.showOpenDialog(MainFrame.this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            try{
                dpTestPlugin = new DataPreprocessor();
                dpTestPlugin.loadInitialData(fc.getSelectedFile().getAbsolutePath());
                jTextStatusLoadModel.setText("Plugin test data loaded!");
                
            } catch (IOException e) {
                dpTestPlugin = null;
                JOptionPane.showMessageDialog(this,"Please load a valid ARFF file!","Loading data error...",JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_pluginTestDataSourceButtonActionPerformed

    private void jListAttributesTestValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_jListAttributesTestValueChanged
        // TODO add your handling code here:
    }//GEN-LAST:event_jListAttributesTestValueChanged

    private void jButtonConnectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonConnectActionPerformed
        // TODO add your handling code here:
        jButtonSaveData.setVisible(false);
        iQueryWorkflowPlatformSystem=null;
        iPlugins=null;

        jTextStatusDB.setText("Running... Please wait...");

 		long start = System.currentTimeMillis();
		sw = new SqlToWekaExtractor(jTextFieldURL.getText(),jTextFieldDriver.getText(),jTextFieldDBName.getText(),jTextFieldUserName.getText(),new String(jPasswordField.getPassword()));
                if (sw.tryConnection())
                    jTextStatusDB.setText("Connected successfully!");
                else
                    jTextStatusDB.setText("Connection failed!");

		//find query metrics names, ids and types
		String sqlQueryQueries = "select metrics.MetricName, metrics.idMetric, mtypes.TypeName from metrics, mtypes where metrics.MetricType = mtypes.idType and metrics.MetricName like 'Query%'";
		//find workflow metrics names, ids and types
		String sqlQueryWorkflow = "select metrics.MetricName, metrics.idMetric, mtypes.TypeName from metrics, mtypes where metrics.MetricType = mtypes.idType and metrics.MetricName like 'Workflow%'";
		//find plugin metrics names, ids and types
		String sqlQueryPlugins = "select metrics.MetricName, metrics.idMetric, mtypes.TypeName from metrics, mtypes where metrics.MetricType = mtypes.idType and metrics.MetricName like 'Plugin%'";
		//find platform metrics names, ids and types
		String sqlQueryPlatform = "select metrics.MetricName, metrics.idMetric, mtypes.TypeName from metrics, mtypes where metrics.MetricType = mtypes.idType and metrics.MetricName like 'Platform%'";
		//find system metrics names, ids and types
		String sqlQuerySystem = "select metrics.MetricName, metrics.idMetric, mtypes.TypeName from metrics, mtypes where metrics.MetricType = mtypes.idType and metrics.MetricName like 'System%'";

		Map <String, ArrayList<String>> queryAttributesAndTypes = sw.getAttributeNamesTypesMetricsIds(sqlQueryQueries);
		Map <String, ArrayList<String>> workflowAttributesAndTypes = sw.getAttributeNamesTypesMetricsIds(sqlQueryWorkflow);
		Map <String, ArrayList<String>> pluginAttributesAndTypes = sw.getAttributeNamesTypesMetricsIds(sqlQueryPlugins);
		Map <String, ArrayList<String>> platformAttributesAndTypes = sw.getAttributeNamesTypesMetricsIds(sqlQueryPlatform);
		Map <String, ArrayList<String>> systemAttributesAndTypes = sw.getAttributeNamesTypesMetricsIds(sqlQuerySystem);

                ArrayList<String> qids;
                if (selectData.getState())
                {
                    System.out.println("Selection by period interval");

                    long startL=((Date)jSpinnerStart.getValue()).getTime();
                    long endL=((Date)jSpinnerEnd.getValue()).getTime();

                    System.out.println("Start-End (milliseconds):"+startL+" -> "+endL);

//                    String startS=(dfStart.getDate().getYear()+1900)+"-"+(dfStart.getDate().getMonth()+1)+"-"+(dfStart.getDate().getDate());
//                    String endS=(dfEnd.getDate().getYear()+1900)+"-"+(dfEnd.getDate().getMonth()+1)+"-"+(dfEnd.getDate().getDate());

                    qids = sw.getQueryIds(startL,endL);

                    //find the ids of the queries that have been run in a given time interval, that is QueryBeginExecutionTime metric is in the given time interval
                    //	ArrayList<String> qids = sw.getQueryIds("20-09-2011 17:10:05", "20-09-2011 17:10:20"); //queries with errors
                    //        qids = sw.getQueryIds("20-09-2011 11:10:05", "20-09-2011 11:10:20"); //queries ok
                    //	ArrayList<String> qids = sw.getQueryIds("19-09-2011 11:10:05", "21-09-2011 11:10:20"); //12400 queries
                    //	ArrayList<String> qids = sw.getQueryIds("19-09-2011 10:30:05", "19-09-2011 17:30:20"); //1820 queries
                }
                else
                    qids = sw.getAllQueryIds();

                System.out.println("We have "+ qids.size() + " unique queries");
		//System.out.println(qids.toString());

		//for each query ID extract the desired list of query metrics and put them in an arff

		Configuration config = new Configuration();

		ArrayList<String> desiredQueryMetrics = config.createListOfDesiredQueryMetrics();

/*
                long begin1=System.currentTimeMillis();
                Map<String, ArrayList<String>> queriesMetrics = sw.getQueryMetrics(qids, queryAttributesAndTypes, desiredQueryMetrics);
              //  System.out.println(queriesMetrics);
                long end1=System.currentTimeMillis();
		System.out.println("Done with query metrics "+ (end1-begin1));	
*/
		//for each queryId extract the desired list of workflow metrics and put them in a map
		//here, for a given query we will have two diffrent workflow ids

		ArrayList<String> desiredWorkflowMetrics = config.createListOfDesiredWorkflowMetrics();
/*
		//get the list of workflow metrics -- they are unified i.e for a queryId we have only a workflow id and the corresponding metrics
		 begin1=System.currentTimeMillis();
                Map<String, ArrayList<String>> workflowMetricsUnified = sw.getWorkflowMetricsUnified(qids, workflowAttributesAndTypes, desiredWorkflowMetrics);
                end1=System.currentTimeMillis();
                System.out.println("Done with workflow metrics - unified:" + (end1-begin1));		
		//System.out.println(workflowMetricsUnified);
*/

                //get the map of queryIds and the workflow description for each query
		Map<String, String> queryIds_workflowDescription = sw.getQueryIds_WorkflowDescription(qids);
		System.out.println("\n Done with workflowDescription");
//		System.out.println(queryIds_workflowDescription);

/*
		//get the map of queryIds and the pluginNames associated to each queryId
		Map <String, Map<String, String>> queryIds_PluginNames_PluginIds = sw.getQueryIds_PluginNames_PluginIds(qids);
		System.out.println("\n Done with  the list of plugin names and their identifiers ");
		System.out.println(queryIds_PluginNames_PluginIds);
*/

                //get the map of queryIds and the pluginId associated to each queryId
		Map <String, ArrayList<String>> queryIds_PluginIds = sw.getQueryIds_PluginIds(qids);
		System.out.println("\n Done with  the list of plugins identifiers");
//		System.out.println(queryIds_PluginIds);
		//extract the desired plugin metrics
		ArrayList<String> desiredPluginMetrics = config.createListOfDesiredPluginMetrics();

/*
                 begin1=System.currentTimeMillis();
		Map<String, HashMap<String, ArrayList<String>>> queryIds_PluginMerics = sw.getQueryIds_pluginMetrics(queryIds_PluginIds, pluginAttributesAndTypes, desiredPluginMetrics);
                 end1=System.currentTimeMillis();
		System.out.println("\n Done with the plugin metrics: " + (end1-begin1));
//		System.out.println(queryIds_PluginMerics);
 */

                long begin1=System.currentTimeMillis();
                iPlugins=sw.getPluginMetricsToInstances(pluginAttributesAndTypes, desiredPluginMetrics, qids, queryIds_PluginIds,queryIds_workflowDescription);
                long end1=System.currentTimeMillis();
 //               System.out.println("\n ARFF -- Done with the plugin metrics: " + (end1-begin1));


		//for each query, get the platform id on which it has been run
                begin1=System.currentTimeMillis();
		Map<String, String> queryIds_PlatformIds = sw.getQueryIds_PlatformIds(qids);
                 end1=System.currentTimeMillis();
//		System.out.println("Done with the map of queryIds - platform ids: " + (end1-begin1));
//                System.out.println(queryIds_PlatformIds);

		//get the platform metrics
		ArrayList<String> desiredPlatformMetrics = config.createListOfDesiredPlatformMetrics();
/*
                begin1=System.currentTimeMillis();
		Map<String, ArrayList<String>> queryIds_PlatformMetrics = sw.getQueryIds_PlatformMetrics(queryIds_PlatformIds, desiredPlatformMetrics);
                end1=System.currentTimeMillis();
		System.out.println("Done with the map platform metrics for the queries: "+ (end1-begin1));
//		System.out.println(queryIds_PlatformMetrics);
*/
		//get the system metrics
		ArrayList<String> desiredSystemMetrics = config.createListOfDesiredSystemMetrics();
/*
                begin1=System.currentTimeMillis();
		Map<String, ArrayList<String>> queryIds_SystemMetrics = sw.getQueryIds_SystemMetrics(queryIds_PlatformIds,desiredSystemMetrics);
                end1=System.currentTimeMillis();                
		System.out.println("Done with the map system metrics for the queries: "+ (end1-begin1));
       //         System.out.println(queryIds_SystemMetrics);  
*/
               begin1=System.currentTimeMillis();
                iQueryWorkflowPlatformSystem =sw.getQueryWorkflowsPlatformSystemMetricsToInstances(queryAttributesAndTypes, desiredQueryMetrics,
                                                                           workflowAttributesAndTypes, desiredWorkflowMetrics, queryIds_workflowDescription,
                                                                           platformAttributesAndTypes, desiredPlatformMetrics, queryIds_PlatformIds,
                                                                           systemAttributesAndTypes, desiredSystemMetrics, queryIds_PlatformIds,
                                                                           qids);
                end1=System.currentTimeMillis();
                System.out.println("ARFF -- Done with the query, workflow, platform and system metrics: "+ (end1-begin1));

		long end = System.currentTimeMillis();
		System.out.println("\nThe total execution time in seconds is " + (end-start)/1000.0);

                jTextStatusDB.setText("Data loading from DB is DONE!");

                if (iQueryWorkflowPlatformSystem.numInstances()>0)
                {
                    dp = new DataPreprocessor();
                    dp.setInitialData(iQueryWorkflowPlatformSystem);
                }
                else
                    dp=null;

                if (iPlugins.numInstances()>0)
                {
                    dpP = new DataPreprocessor();
                    dpP.setInitialData(iPlugins);
                }
                else
                    dpP=null;

                jButtonSaveData.setVisible(true);
    }//GEN-LAST:event_jButtonConnectActionPerformed

    private void selectDataItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_selectDataItemStateChanged
        // TODO add your handling code here:
            jPanelDateSelection.setVisible(selectData.getState());
    }//GEN-LAST:event_selectDataItemStateChanged

    private void jButtonSaveDataActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSaveDataActionPerformed
        // TODO add your handling code here:

        JFileChooser fc = new JFileChooser();
        fc.setCurrentDirectory(new File(System.getProperty("user.dir")));
        fc.setFileFilter(new FileFilterExt("arff"));
        fc.setDialogTitle("Save QueryWorkflowPlatformSystem metrics");
        int returnVal = fc.showSaveDialog(MainFrame.this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            String fileName=fc.getSelectedFile().getAbsolutePath()+".arff";
            jTextStatusDB.setText("Saving QueryWorkflowPlatformSystem metrics. . .");
            DataPreprocessor.outputArffInstances(iQueryWorkflowPlatformSystem, fileName);
            jTextStatusDB.setText("SUCCESSFULLY saved QueryWorkflowPlatformSystem metrics!");
        }
        else
            jTextStatusDB.setText("NOT saved!");

        fc = new JFileChooser();
        fc.setCurrentDirectory(new File(System.getProperty("user.dir")));
        fc.setFileFilter(new FileFilterExt("arff"));
        fc.setDialogTitle("Save Plugin metrics");
        returnVal = fc.showSaveDialog(MainFrame.this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            String fileName=fc.getSelectedFile().getAbsolutePath()+".arff";
            jTextStatusDB.setText("Saving Plugin metrics. . .");
            DataPreprocessor.outputArffInstances(iPlugins, fileName);
            jTextStatusDB.setText("SUCCESSFULLY saved Plugin metrics!");
        }
        else
            jTextStatusDB.setText("NOT saved!");

    }//GEN-LAST:event_jButtonSaveDataActionPerformed
    public void toggleAutomaticTestFeatures(boolean state)
    {
        queryTestDataSourceButton.setVisible(state);
        pluginTestDataSourceButton.setVisible(state);
        testPredictionButton.setVisible(state);
        jListAttributesTest.setListData(new String[] {});
        jListAttributesTest.clearSelection();
        jListAttributesTest.setVisible(state);
        actualVsPredictedButton.setVisible(state);
        projectionKCCAButton.setVisible(state);
    }


    /**
    * @param args the command line arguments
    */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton actualVsPredictedButton;
    private javax.swing.ButtonGroup buttonGroupKCCA;
    private javax.swing.JButton jButtonBuildPredictionModel;
    private javax.swing.JButton jButtonChooseDataSource;
    private javax.swing.JButton jButtonChooseDataSourceP;
    private javax.swing.JButton jButtonConfiguration;
    private javax.swing.JButton jButtonConnect;
    private javax.swing.JButton jButtonLoadModel;
    private javax.swing.JButton jButtonPredict;
    private javax.swing.JButton jButtonSaveData;
    private javax.swing.JButton jButtonSaveModel;
    private javax.swing.JCheckBox jCheckBoxBestConfiguration;
    private javax.swing.JCheckBox jCheckClusteringRegression;
    private javax.swing.JCheckBox jCheckKCCA;
    private javax.swing.JCheckBox jCheckKernelRegression;
    private javax.swing.JCheckBox jCheckPlugins;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel24;
    private javax.swing.JLabel jLabel25;
    private javax.swing.JLabel jLabel26;
    private javax.swing.JLabel jLabel27;
    private javax.swing.JLabel jLabel28;
    private javax.swing.JLabel jLabel29;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel30;
    private javax.swing.JLabel jLabel31;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JList jListAttributes;
    private javax.swing.JList jListAttributesP;
    private javax.swing.JList jListAttributesTest;
    private javax.swing.JPanel jLoadDB;
    private javax.swing.JPanel jLoadPanel;
    private javax.swing.JPanel jLoadPanelP;
    private javax.swing.JPanel jMachineLearningPanel;
    private javax.swing.JPanel jPanelDateSelection;
    private javax.swing.JPasswordField jPasswordField;
    private javax.swing.JRadioButton jRadioButtonNumericalPrediction;
    private javax.swing.JRadioButton jRadioButtonWorkflowPrediction;
    private javax.swing.JPanel jResultsPanel;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane10;
    private javax.swing.JScrollPane jScrollPane11;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JScrollPane jScrollPane8;
    private javax.swing.JScrollPane jScrollPane9;
    private javax.swing.JSpinner jSpinnerEnd;
    private javax.swing.JSpinner jSpinnerStart;
    private javax.swing.JTabbedPane jTabbedPane;
    private javax.swing.JTable jTableFeatureValues;
    private javax.swing.JTable jTableFeatureValuesP;
    private javax.swing.JTextField jTextDataPath;
    private javax.swing.JTextField jTextDataPathP;
    private javax.swing.JTextField jTextFieldDBName;
    private javax.swing.JTextField jTextFieldDriver;
    private javax.swing.JTextField jTextFieldURL;
    private javax.swing.JTextField jTextFieldUserName;
    private javax.swing.JTextField jTextMax;
    private javax.swing.JTextField jTextMaxP;
    private javax.swing.JTextField jTextMean;
    private javax.swing.JTextField jTextMeanP;
    private javax.swing.JTextField jTextMin;
    private javax.swing.JTextField jTextMinP;
    private javax.swing.JTextField jTextNbFeatures;
    private javax.swing.JTextField jTextNbFeaturesP;
    private javax.swing.JTextField jTextNbInstances;
    private javax.swing.JTextField jTextNbInstancesP;
    private javax.swing.JTextArea jTextQuery;
    private javax.swing.JTextArea jTextResults;
    private javax.swing.JTextArea jTextStatus;
    private javax.swing.JTextArea jTextStatusDB;
    private javax.swing.JTextArea jTextStatusLoadModel;
    private javax.swing.JTextField jTextStdDev;
    private javax.swing.JTextField jTextStdDevP;
    private javax.swing.JTextArea jTextWorkflow;
    private javax.swing.ButtonGroup jbuttonGroup;
    private javax.swing.JButton pluginTestDataSourceButton;
    private javax.swing.JButton projectionKCCAButton;
    private javax.swing.JButton queryTestDataSourceButton;
    private java.awt.Checkbox selectData;
    private javax.swing.JButton testPredictionButton;
    private org.jdesktop.beansbinding.BindingGroup bindingGroup;
    // End of variables declaration//GEN-END:variables

//    public DateField dfStart=new DateField(Calendar.getInstance().getTime());
//    public DateField dfEnd=new DateField(Calendar.getInstance().getTime());

    private DataPreprocessor dp=null;
    private DataPreprocessor dpP=null;
    private DataPreprocessor dpw = null;
    private RFClusteringRegression rf=null;
    private KernelRegression kr=null;
    private BestConfigurator bf=null;
    private RFPlugins prf=null;
    private KCCA kcca = null;
    
    private DataPreprocessor dpTestQuery = null;
    private DataPreprocessor dpTestPlugin = null;
    private DataPreprocessor dpTestWorkflow = null;

    private Instances iQueryWorkflowPlatformSystem=null;
    private Instances iPlugins=null;

    private SqlToWekaExtractor sw=null;
}
